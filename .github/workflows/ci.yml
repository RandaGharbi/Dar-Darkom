name: CI/CD Pipeline

# Pipeline corrigé pour Yarn 4.9.2 et Docker sans cache
on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  NODE_VERSION: '18'
  REGISTRY: ghcr.io
  IMAGE_NAME: randagharbi/guerlain
  DOCKER_USERNAME: randagharbi
  REPOSITORY_NAME: guerlain

jobs:
  # Tests et linting
  test:
    name: Tests & Linting
    runs-on: ubuntu-latest
    
    services:
      mongodb:
        image: mongo:6.0
        ports:
          - 27017:27017
        options: >-
          --health-cmd "mongosh --eval 'db.runCommand(\"ping\").ok'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}

    - name: Activer Corepack et installer Yarn 4.9.2
      run: |
        corepack enable
        corepack prepare yarn@4.9.2 --activate

    - name: Install dependencies
      run: |
        yarn install --frozen-lockfile
        yarn workspaces list

    - name: Verify workspace configuration
      run: |
        echo "Current directory: $(pwd)"
        echo "Yarn version: $(yarn --version)"
        echo "Workspaces:"
        yarn workspaces list
        echo "Available scripts in root:"
        yarn run --help
        echo "Package.json content:"
        cat package.json | grep -A 10 '"scripts"'

    - name: Run linting
      run: yarn run lint

    - name: Run type checking
      run: yarn run type-check

    - name: Run tests
      run: yarn run test
      env:
        MONGODB_URI: mongodb://localhost:27017/guerlain-test
        JWT_SECRET: test-jwt-secret
        NODE_ENV: test

    - name: Run backend tests
      working-directory: apps/backend
      run: yarn test
      env:
        MONGODB_URI: mongodb://localhost:27017/guerlain-test
        JWT_SECRET: test-jwt-secret
        NODE_ENV: test

    - name: Run web tests
      working-directory: apps/web
      run: yarn test

  # Build des images Docker
  build:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Verify Dockerfile
      run: |
        echo "=== Dockerfile content ==="
        cat Dockerfile
        echo "=== Checking for yarn install command ==="
        grep -n "yarn install" Dockerfile
        echo "=== Checking for Yarn version ==="
        grep -n "yarn@4.9.2" Dockerfile

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: randagharbi
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Build and push Backend image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        target: backend-production
        push: true
        tags: ghcr.io/randagharbi/guerlain/backend:${{ github.sha }}
        no-cache: true
        build-args: |
          BUILDKIT_INLINE_CACHE=0
        platforms: linux/amd64

    - name: Build and push Web image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        target: web-production
        push: true
        tags: ghcr.io/randagharbi/guerlain/web:${{ github.sha }}
        no-cache: true
        platforms: linux/amd64

    - name: Build and push Mobile image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        target: mobile-production
        push: true
        tags: ghcr.io/randagharbi/guerlain/mobile:${{ github.sha }}
        no-cache: true
        platforms: linux/amd64

  # Déploiement en staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/develop'
    
    steps:
    - name: Deploy to staging server
      run: |
        echo "Deploying to staging..."
        # Ici vous pouvez ajouter vos commandes de déploiement
        # Par exemple: ssh, kubectl, docker-compose, etc.

  # Déploiement en production
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Deploy to production server
      run: |
        echo "Deploying to production..."
        # Ici vous pouvez ajouter vos commandes de déploiement
        # Par exemple: ssh, kubectl, docker-compose, etc.